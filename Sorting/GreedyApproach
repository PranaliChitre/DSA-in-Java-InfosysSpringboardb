class Tester {

    public static int findMaxActivities(int start[], int finish[]) { 
        int n = start.length;
        if (n == 0) {
            return 0; // No activities to schedule
        }
        
        // Array to store activities as pairs of [start, finish]
        int[][] activities = new int[n][2];
        for (int i = 0; i < n; i++) {
            activities[i][0] = start[i];
            activities[i][1] = finish[i];
        }
        
        // Sort activities by finish time
        Arrays.sort(activities, (a, b) -> Integer.compare(a[1], b[1]));
        
        // Select the first activity
        int maxActivities = 1; // First activity is always selected
        int lastFinishTime = activities[0][1];
        
        // Iterate through the sorted activities
        for (int i = 1; i < n; i++) {
            int currentStart = activities[i][0];
            if (currentStart >= lastFinishTime) {
                // We can select this activity
                maxActivities++;
                lastFinishTime = activities[i][1];
            }
        }
        
        return maxActivities;
    } 
       
    public static void main(String[] args) { 
        int start[] = {1, 3, 0, 5, 8, 5}; 
        int finish[] = {2, 4, 6, 7, 9, 9};
        
        System.out.println("Maximum number of activities: " + findMaxActivities(start, finish)); 
    }
}
